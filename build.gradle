buildscript {
	dependencies {
		classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.21.0"
	}
}
plugins {
	id 'org.springframework.boot' version '2.4.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java-library'
	id 'maven-publish' /* maven publish */
	id 'signing'
}
apply plugin: 'io.codearte.nexus-staging'

group = 'dev.yafatek'
version = '1.0.101'
sourceCompatibility = '11'
archivesBaseName = "rest-core"

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.4'
//	implementation 'org.springframework.boot:spring-boot-starter-webflux'
//	runtimeOnly 'mysql:mysql-connector-java'

}
task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

if (project.hasProperty("signing.keyId")) {
	apply plugin: 'signing'
	signing {
		sign configurations.archives
	}
}
bootJar {
	enabled = false
}

jar {
	enabled = true
}
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = 'dev.yafatek'
version = '1.0.101'

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
	println "Found secret props file, loading props"
	Properties p = new Properties()
	p.load(new FileInputStream(secretPropsFile))
	p.each { name, value ->
		ext[name] = value
	}
} else {
	println "No props file, loading env vars"
	ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
	ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
	ext["signing.secretKeyRingFile"] = System.getenv('SIGNING_SECRET_KEY_RING_FILE')
	ext["ossrhUsername"] = System.getenv('OSSRH_USERNAME')
	ext["ossrhPassword"] = System.getenv('OSSRH_PASSWORD')
	ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
}

nexusStaging {
	packageGroup = 'dev.yafatek'
	stagingProfileId = sonatypeStagingProfileId
	username = ossrhUsername
	password = ossrhPassword
}

publishing {
	publications {
		release(MavenPublication) {
			// The coordinates of the library, being set from variables that
			// we'll set up in a moment
			groupId 'dev.yafatek'
			artifactId 'dev.yafatek.restcore'
			version '1.0.101'

			// Two artifacts, the `aar` and the sources
			artifact("$buildDir/libs/${project.getName()}-1.0.101.jar")
			artifact sourcesJar

			// Self-explanatory metadata for the most part
			pom {
				name = 'YafaTek RestFul-Core Lib'
				description = 'light weight library to build modern RestFul Apis'
				// If your project has a dedicated site, use its URL here
				url = 'https://github.com/yafatek/restfu-core'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						id = 'YafaTek Solutions'
						name = 'YafaTek'
						email = 'info@yafatek.dev'
					}
				}
				// Version control info, if you're using GitHub, follow the format as seen here
				scm {
					connection = 'scm:git:github.com/yafatek/restfu-core'
					developerConnection = 'scm:git:ssh://github.com/yafatek/restfu-core'
					url = 'https://github.com/yafatek/restfu-core'
				}
				// A slightly hacky fix so that your POM will include any transitive dependencies
				// that your library builds upon
				withXml {
					def dependenciesNode = asNode().appendNode('dependencies')

					project.configurations.implementation.allDependencies.each {
						def dependencyNode = dependenciesNode.appendNode('dependency')
						dependencyNode.appendNode('groupId', it.group)
						dependencyNode.appendNode('artifactId', it.name)
						dependencyNode.appendNode('version', it.version)
					}
				}
			}
		}
	}
	repositories {
		// The repository to publish to, Sonatype/MavenCentral
		maven {
			// This is an arbitrary name, you may also use "mavencentral" or
			// any other name that's descriptive for you
			name = "sonatype"

			def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
			// You only need this if you want to publish snapshots, otherwise just set the URL
			// to the release repo directly
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

			// The username and password we've fetched earlier
			credentials {
				username 'yafatek-solutions'
				password 'Yafa!@123Yafa!@123'
			}
		}
	}
}

